{{- range .Values.NODES }}
{{- if eq (int .VC_TYPE) 0 }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: vc{{ .index }}-teku
  name: vc{{ .index }}-teku
  namespace: {{ $.Values.CLUSTER_NAME }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vc{{ .index }}-teku
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: vc{{ .index }}-teku
    spec:
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
      imagePullSecrets:
        - name: docker-registry
      initContainers:
        - name: init-chown
          image: amazon/aws-cli:latest
          env:
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: aws-credentials
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: aws-credentials
            - name: AWS_SESSION_TOKEN
              valueFrom:
                secretKeyRef:
                  key: AWS_SESSION_TOKEN
                  name: aws-credentials
          securityContext:
            runAsUser: 0
          command:
            - sh
            - -ac
            - >
              aws s3 cp --recursive s3://charon-clusters-config/{{ $.Values.CLUSTER_NAME }}/node{{ .index }}/validator_keys /validator_keys;
              aws s3 cp --recursive s3://charon-clusters-config/{{ $.Values.CLUSTER_NAME }}/testnet /config;
              rm -rf /data/teku/validator_keys 2>/dev/null || true;
              mkdir -p /data/teku/validator_keys;
              cp /validator_keys/* /data/teku/validator_keys;
              chown -R 1000:1000 /data/teku;
          volumeMounts:
            - name: data
              mountPath: /data/teku
            - name: validators
              mountPath: "/validator_keys"
            - name: config
              mountPath: "/config"
      containers:
        - name: vc{{ .index }}-teku
          image: consensys/teku:{{ .VC_VERSION }}
          imagePullPolicy: Always
          command:
            - sh
            - -ace
            - |
              /opt/teku/bin/teku vc \
              --network=/config/config.yaml \
              --log-destination=console \
              --data-base-path=/data/teku \
              --metrics-enabled=true \
              --metrics-host-allowlist="*" \
              --metrics-interface="0.0.0.0" \
              --metrics-port="8008" \
              --validator-keys="/data/teku/validator_keys:/data/teku/validator_keys" \
              --validators-external-signer-slashing-protection-enabled=true \
              --validators-graffiti="Obol Distributed Validator" \
              --beacon-node-api-endpoint="http://node{{ .index }}:3600" \
              --validators-proposer-blinded-blocks-enabled=true \
              --validators-builder-registration-default-enabled=true \
              --Xobol-dvt-integration-enabled=true \
              --validators-proposer-default-fee-recipient={{ $.Values.PROPOSER_DEFAULT_FEE_RECIPIENT }}
          volumeMounts:
            - name: data
              mountPath: /data/teku
            - name: config
              mountPath: /config
      volumes:
        - name: validators
          emptyDir: {}
        - name: data
          emptyDir: {}
        - name: config
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: vc{{ .index }}-teku
  namespace: {{ $.Values.CLUSTER_NAME }}
  labels:
    app: vc{{ .index }}-teku
spec:
  selector:
    app: vc{{ .index }}-teku
  ports:
    - name: metrics
      protocol: TCP
      port: 8008
      targetPort: 8008
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: vc{{ .index }}-teku
  namespace: {{ $.Values.CLUSTER_NAME }}
spec:
  selector:
    matchLabels:
      app: vc{{ .index }}-teku
  endpoints:
    - port: metrics
{{- end }}
{{- end }}
