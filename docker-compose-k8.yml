x-node-base:
  # Pegged charon version (update this for each release).
  &node-base
  image: obolnetwork/charon:latest
  restart: unless-stopped
  networks: [network1]
  # network_mode: "host"
  # for nimbus add: --feature-set-enable=json_requests
  command: "run --testnet-chain-id=3151908 --testnet-fork-version='0x10000038' --testnet-genesis-timestamp=${TESTNET_GENESIS_TIME_STAMP} --testnet-name=testnet --testnet-capella-hard-fork='0x40000038'"
  volumes:
    - ./.charon:/opt/charon/.charon/

x-node-env: &node-env
  CHARON_LOG_LEVEL: ${CHARON_LOG_LEVEL:-debug}
  CHARON_LOG_FORMAT: ${CHARON_LOG_FORMAT:-console}
  # CHARON_P2P_EXTERNAL_HOSTNAME: ${CHARON_P2P_EXTERNAL_HOSTNAME:-} # Empty default required to avoid warnings.
  CHARON_P2P_RELAYS: ${CHARON_P2P_RELAYS:-https://0.relay.obol.tech}
  # CHARON_JAEGER_ADDRESS: ${CHARON_JAEGER_ADDRESS-jaeger:6831} # Overriding to empty address allowed
  CHARON_BUILDER_API: ${BUILDER_API_ENABLED:-true}

services:
  #       _                                  _ _            _
  #   ___| |__   __ _ _ __ ___  _ __     ___| (_) ___ _ __ | |_ ___
  #  / __| '_ \ / _` | '__/ _ \| '_ \   / __| | |/ _ \ '_ \| __/ __|
  # | (__| | | | (_| | | | (_) | | | | | (__| | |  __/ | | | |_\__ \
  #  \___|_| |_|\__,_|_|  \___/|_| |_|  \___|_|_|\___|_| |_|\__|___/
  node0:
    <<: *node-base
    container_name: node0-${CL_NAME}
    environment:
      <<: *node-env
      CHARON_PRIVATE_KEY_FILE: /opt/charon/.charon/cluster/node0/charon-enr-private-key
      CHARON_LOCK_FILE: /opt/charon/.charon/cluster/node0/cluster-lock.json
      CHARON_JAEGER_SERVICE: node0
      CHARON_P2P_EXTERNAL_HOSTNAME: node0
      CHARON_VALIDATOR_API_ADDRESS: ${CHARON_VALIDATOR_API_ADDRESS:-0.0.0.0:3600}
      CHARON_P2P_TCP_ADDRESS: ${CHARON_P2P_TCP_ADDRESS:-0.0.0.0:3610}
      CHARON_MONITORING_ADDRESS: ${CHARON_MONITORING_ADDRESS:-0.0.0.0:3620}
      CHARON_BEACON_NODE_ENDPOINTS: ${BN_0:-http://172.16.4.9:4000}
    # expose:
    #   - 3600
    # ports:
    #   - "3600:3600"

  node1:
    <<: *node-base
    container_name: node1-${CL_NAME}
    environment:
      <<: *node-env
      CHARON_PRIVATE_KEY_FILE: /opt/charon/.charon/cluster/node1/charon-enr-private-key
      CHARON_LOCK_FILE: /opt/charon/.charon/cluster/node1/cluster-lock.json
      CHARON_JAEGER_SERVICE: node1
      CHARON_P2P_EXTERNAL_HOSTNAME: node1
      CHARON_VALIDATOR_API_ADDRESS: ${CHARON_VALIDATOR_API_ADDRESS:-0.0.0.0:3600}
      CHARON_P2P_TCP_ADDRESS: ${CHARON_P2P_TCP_ADDRESS:-0.0.0.0:3610}
      CHARON_MONITORING_ADDRESS: ${CHARON_MONITORING_ADDRESS:-0.0.0.0:3620}
      CHARON_BEACON_NODE_ENDPOINTS: ${BN_1:-http://172.16.4.9:4000}
    # expose:
    #   - 3600
    # ports:
    #   - "3600:3600"

  node2:
    <<: *node-base
    container_name: node2-${CL_NAME}
    environment:
      <<: *node-env
      CHARON_PRIVATE_KEY_FILE: /opt/charon/.charon/cluster/node2/charon-enr-private-key
      CHARON_LOCK_FILE: /opt/charon/.charon/cluster/node2/cluster-lock.json
      CHARON_JAEGER_SERVICE: node2
      CHARON_P2P_EXTERNAL_HOSTNAME: node2
      CHARON_VALIDATOR_API_ADDRESS: ${CHARON_VALIDATOR_API_ADDRESS:-0.0.0.0:3600}
      CHARON_P2P_TCP_ADDRESS: ${CHARON_P2P_TCP_ADDRESS:-0.0.0.0:3610}
      CHARON_MONITORING_ADDRESS: ${CHARON_MONITORING_ADDRESS:-0.0.0.0:3620}
      CHARON_BEACON_NODE_ENDPOINTS: ${BN_2:-http://172.16.4.9:4000}
    # expose:
    #   - 3600
    # ports:
    #   - "3600:3600"

  # relay:
  #   <<: *node-base
  #   command: relay
  #   depends_on: []
  #   environment:
  #     <<: *node-env
  #     CHARON_HTTP_ADDRESS: 0.0.0.0:3640
  #     CHARON_DATA_DIR: /opt/charon/relay
  #     CHARON_P2P_RELAYS: ""
  #     CHARON_P2P_EXTERNAL_HOSTNAME: relay
  #   volumes:
  #     - ./relay:/opt/charon/relay:rw

  #             _ _     _       _
  # __   ____ _| (_) __| | __ _| |_ ___  _ __ ___
  # \ \ / / _` | | |/ _` |/ _` | __/ _ \| '__/ __|
  #  \ V / (_| | | | (_| | (_| | || (_) | |  \__ \
  #   \_/ \__,_|_|_|\__,_|\__,_|\__\___/|_|  |___/
  vc0-lighthouse:
    image: sigp/lighthouse:${LIGHTHOUSE_VERSION:-v5.3.0}
    # image: 113746/lighthouse:distributed
    entrypoint: /opt/lighthouse/run.sh
    networks: [network1]
    # network_mode: "host"
    depends_on: [node0]
    restart: unless-stopped
    environment:
      LIGHTHOUSE_BEACON_NODE_ADDRESS: http://node0:3600
      # ETH2_NETWORK: ${ETH2_NETWORK:-holesky}
      METRICS_PORT: "5065"
      # TESTNET_DIR: "/opt/lighthouse/network-configs"
    volumes:
      - ./lighthouse/run.sh:/opt/lighthouse/run.sh
      - .charon/cluster/node0/validator_keys:/opt/charon/keys
      - ./testnet:/opt/lighthouse/network-configs

  vc1-lighthouse:
    image: sigp/lighthouse:${LIGHTHOUSE_VERSION:-v5.3.0}
    # image: 113746/lighthouse:distributed
    entrypoint: /opt/lighthouse/run.sh
    networks: [network1]
    # network_mode: "host"
    depends_on: [node1]
    restart: unless-stopped
    environment:
      LIGHTHOUSE_BEACON_NODE_ADDRESS: http://node1:3600
      # ETH2_NETWORK: ${ETH2_NETWORK:-holesky}
      METRICS_PORT: "5065"
      # TESTNET_DIR: "/opt/lighthouse/network-configs"
    volumes:
      - ./lighthouse/run.sh:/opt/lighthouse/run.sh
      - .charon/cluster/node1/validator_keys:/opt/charon/keys
      - ./testnet:/opt/lighthouse/network-configs

  vc2-lighthouse:
    image: sigp/lighthouse:${LIGHTHOUSE_VERSION:-v5.3.0}
    # image: 113746/lighthouse:distributed
    entrypoint: /opt/lighthouse/run.sh
    networks: [network1]
    # network_mode: "host"
    depends_on: [node2]
    restart: unless-stopped
    environment:
      LIGHTHOUSE_BEACON_NODE_ADDRESS: http://node2:3600
      # ETH2_NETWORK: ${ETH2_NETWORK:-holesky}
      METRICS_PORT: "5065"
      # TESTNET_DIR: "/opt/lighthouse/network-configs"
    volumes:
      - ./lighthouse/run.sh:/opt/lighthouse/run.sh
      - .charon/cluster/node2/validator_keys:/opt/charon/keys
      - ./testnet:/opt/lighthouse/network-configs

  vc0-teku:
    image: consensys/teku:${TEKU_VERSION:-24.8}
    networks: [network1]
    # network_mode: "host"
    depends_on: [node0]
    restart: unless-stopped
    command: |
      validator-client
      --beacon-node-api-endpoint="http://node0:3600"
      --config-file "/opt/charon/teku/teku-config.yaml"
      --Xblock-v3-enabled true
      --validators-external-signer-slashing-protection-enabled true
      --validators-proposer-blinded-blocks-enabled ${BUILDER_API_ENABLED:-true}
      --validators-builder-registration-default-enabled ${BUILDER_API_ENABLED:-true}
      --Xobol-dvt-integration-enabled true
      --logging=DEBUG
    volumes:
      - .charon/cluster/node0/validator_keys:/opt/charon/validator_keys
      - ./teku:/opt/charon/teku
      - ./testnet/config.yaml:/opt/teku/config.yaml

  vc1-teku:
    image: consensys/teku:${TEKU_VERSION:-24.8}
    networks: [network1]
    # network_mode: "host"
    depends_on: [node1]
    restart: unless-stopped
    command: |
      validator-client
      --beacon-node-api-endpoint=http://node1:3600
      --config-file "/opt/charon/teku/teku-config.yaml"
      --Xblock-v3-enabled true
      --validators-external-signer-slashing-protection-enabled true
      --validators-proposer-blinded-blocks-enabled ${BUILDER_API_ENABLED:-true}
      --validators-builder-registration-default-enabled ${BUILDER_API_ENABLED:-true}
      --Xobol-dvt-integration-enabled true
      --logging=DEBUG
    volumes:
      - .charon/cluster/node1/validator_keys:/opt/charon/validator_keys
      - ./teku:/opt/charon/teku
      - ./testnet/config.yaml:/opt/teku/config.yaml

  vc2-teku:
    image: consensys/teku:${TEKU_VERSION:-24.8}
    networks: [network1]
    # network_mode: "host"
    depends_on: [node2]
    restart: unless-stopped
    command: |
      validator-client
      --beacon-node-api-endpoint=http://node2:3600
      --config-file "/opt/charon/teku/teku-config.yaml"
      --Xblock-v3-enabled true
      --validators-external-signer-slashing-protection-enabled true
      --validators-proposer-blinded-blocks-enabled ${BUILDER_API_ENABLED:-true}
      --validators-builder-registration-default-enabled ${BUILDER_API_ENABLED:-true}
      --Xobol-dvt-integration-enabled true
      --logging=DEBUG
    volumes:
      - .charon/cluster/node2/validator_keys:/opt/charon/validator_keys
      - ./teku:/opt/charon/teku
      - ./testnet/config.yaml:/opt/teku/config.yaml

  vc0-nimbus:
    build: nimbus
    networks: [network1]
    # network_mode: "host"
    depends_on: [node0]
    restart: unless-stopped
    environment:
      NODE: node0
    volumes:
      - .charon/cluster/node0/validator_keys:/home/validator_keys
      - ./data/nimbus/vc0:/home/user/data/node0
      - ./nimbus/run.sh:/home/user/data/run.sh

  vc1-nimbus:
    build: nimbus
    networks: [network1]
    # network_mode: "host"
    depends_on: [node1]
    restart: unless-stopped
    environment:
      NODE: node1
    volumes:
      - .charon/cluster/node1/validator_keys:/home/validator_keys
      - ./data/nimbus/vc1:/home/user/data/node1
      - ./nimbus/run.sh:/home/user/data/run.sh

  vc2-nimbus:
    build: nimbus
    networks: [network1]
    # network_mode: "host"
    depends_on: [node2]
    restart: unless-stopped
    environment:
      NODE: node2
    volumes:
      - .charon/cluster/node2/validator_keys:/home/validator_keys
      - ./data/nimbus/vc2:/home/user/data/node2
      - ./nimbus/run.sh:/home/user/data/run.sh

  vc0-lodestar:
    image: chainsafe/lodestar:${LODESTAR_VERSION:-v1.20.2}
    depends_on: [node0]
    entrypoint: /opt/lodestar/run.sh
    networks: [network1]
    user: 1000:1000
    # network_mode: "host"
    environment:
      BUILDER_API_ENABLED: ${BUILDER_API_ENABLED:-true}
      BEACON_NODE_ADDRESS: "http://node0:3600"
    volumes:
      - ./lodestar/run.sh:/opt/lodestar/run.sh
      - ./testnet/config.yaml:/opt/lodestar/config.yaml
      - .charon/cluster/node0/validator_keys:/home/charon/validator_keys
      - ./data/lodestar/vc0:/opt/data
    restart: unless-stopped

  vc1-lodestar:
    image: chainsafe/lodestar:${LODESTAR_VERSION:-v1.20.2}
    depends_on: [node1]
    entrypoint: /opt/lodestar/run.sh
    networks: [network1]
    user: 1000:1000
    # network_mode: "host"
    environment:
      BEACON_NODE_ADDRESS: "http://node1:3600"
      # NETWORK: ${ETH2_NETWORK:-holesky}
      BUILDER_API_ENABLED: ${BUILDER_API_ENABLED:-true}
    volumes:
      - ./lodestar/run.sh:/opt/lodestar/run.sh
      - ./testnet/config.yaml:/opt/lodestar/config.yaml
      - .charon/cluster/node1/validator_keys:/home/charon/validator_keys
      - ./data/lodestar/vc1:/opt/data
    restart: unless-stopped

  vc2-lodestar:
    image: chainsafe/lodestar:${LODESTAR_VERSION:-v1.20.2}
    depends_on: [node2]
    entrypoint: /opt/lodestar/run.sh
    networks: [network1]
    user: 1000:1000
    # network_mode: "host"
    environment:
      BEACON_NODE_ADDRESS: "http://node2:3600"
      # NETWORK: ${ETH2_NETWORK:-holesky}
      BUILDER_API_ENABLED: ${BUILDER_API_ENABLED:-true}
    volumes:
      - ./lodestar/run.sh:/opt/lodestar/run.sh
      - ./testnet/config.yaml:/opt/lodestar/config.yaml
      - .charon/cluster/node2/validator_keys:/home/charon/validator_keys
      - ./data/lodestar/vc2:/opt/data
    restart: unless-stopped

  vc0-prysm:
    build: prysm
    platform: "linux/amd64"
    networks: [network1]
    depends_on: [node0]
    restart: unless-stopped
    environment:
      BEACON_NODE_ADDRESS: "http://node0:3600"
      # ETH2_NETWORK: ${ETH2_NETWORK:-goerli}
    volumes:
      - ./prysm/run.sh:/home/prysm/run.sh
      - .charon/cluster/node0/validator_keys:/home/charon/validator_keys
      - ./testnet/config.yaml:/home/data/config.yaml

  vc1-prysm:
    build: prysm
    platform: "linux/amd64"
    networks: [network1]
    depends_on: [node1]
    restart: unless-stopped
    environment:
      BEACON_NODE_ADDRESS: "http://node1:3600"
      # ETH2_NETWORK: ${ETH2_NETWORK:-goerli}
    volumes:
      - ./prysm/run.sh:/home/prysm/run.sh
      - .charon/cluster/node1/validator_keys:/home/charon/validator_keys
      - ./testnet/config.yaml:/home/data/config.yaml

  vc2-prysm:
    build: prysm
    platform: "linux/amd64"
    networks: [network1]
    depends_on: [node2]
    restart: unless-stopped
    environment:
      BEACON_NODE_ADDRESS: "http://node2:3600"
      # ETH2_NETWORK: ${ETH2_NETWORK:-goerli}
    volumes:
      - ./prysm/run.sh:/home/prysm/run.sh
      - .charon/cluster/node2/validator_keys:/home/charon/validator_keys
      - ./testnet/config.yaml:/home/data/config.yaml

    # vc0-teku-exit:
  #   image: consensys/teku:${TEKU_VERSION:-ethpandaops/teku:master}
  #   networks: [ network1 ]
  #   depends_on: [ node0 ]
  #   restart: unless-stopped
  #   command: |
  #     voluntary-exit
  #     --beacon-node-api-endpoint="http://node0:3600"
  #     --config-file "/opt/charon/teku/teku-config.yaml"
  #     --validator-keys=/opt/charon/validator_keys/keystore-0.json:/opt/charon/validator_keys/keystore-0.txt
  #     --confirmation-enabled=false
  #   volumes:
  #     - .charon/cluster/node0/validator_keys:/opt/charon/validator_keys
  #     - ./teku:/opt/charon/teku
  #     - ./testnet/network-configs/config.yaml:/opt/teku/config.yaml

  #                        _ _             _
  #  _ __ ___   ___  _ __ (_) |_ ___  _ __(_)_ __   __ _
  # | '_ ` _ \ / _ \| '_ \| | __/ _ \| '__| | '_ \ / _` |
  # | | | | | | (_) | | | | | || (_) | |  | | | | | (_| |
  # |_| |_| |_|\___/|_| |_|_|\__\___/|_|  |_|_| |_|\__, |
  #                                                |___/
  prometheus:
    image: prom/prometheus:${PROMETHEUS_VERSION:-v2.44.0}
    ports:
      - "${MONITORING_PORT_PROMETHEUS}"
    networks: [network1]
    volumes:
      - ./prometheus/prometheustmp.yml:/etc/prometheus/prometheus.yml
    environment:
      PROMETHEUS_REMOTE_WRITE_TOKEN: ${PROMETHEUS_REMOTE_WRITE_TOKEN}

  # grafana:
  #   image: grafana/grafana:${GRAFANA_VERSION:-9.5.3}
  #   ports:
  #     - "3000:3000"
  #   networks: [ network1 ]
  #   depends_on: [ prometheus ]
  #   volumes:
  #     - ./grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
  #     - ./grafana/dashboards.yml:/etc/grafana/provisioning/dashboards/datasource.yml
  #     - ./grafana/grafana.ini:/etc/grafana/grafana.ini:ro
  #     - ./grafana/dashboards:/etc/dashboards

  # node-exporter:
  #   image: prom/node-exporter:${NODE_EXPORTER_VERSION:-v1.6.0}
  #   ports:
  #     - "9100:9100"
  #   networks: [ network1 ]

networks:
  network1:
    name: ${NETWORK_NAME}
    # driver: bridge
    # external: true
