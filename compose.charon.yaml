name: kurtosis-charon

x-node-base: &node-base
  image: kaloyantanev/charon:v1.5.0-rc4-no-fulu
  restart: unless-stopped
  networks: [network1]
  command: "run --testnet-chain-id=3151908 --testnet-fork-version='0x10000038' --testnet-genesis-timestamp=${TESTNET_GENESIS_TIME_STAMP} --testnet-name=testnet --testnet-capella-hard-fork='0x40000038' ${CHARON_EXTRA_RUN_ARGS:-}"
  volumes:
    - ./.charon:/opt/charon/.charon/
  user: "${DUID:-}:${DGID:-}" # Used by docker-in-docker as it's based on linux

x-node-env: &node-env
  CHARON_LOG_LEVEL: debug
  CHARON_LOG_FORMAT: console
  CHARON_P2P_RELAYS: https://0.relay.obol.tech
  CHARON_BUILDER_API: true
  CHARON_VALIDATOR_API_ADDRESS: 0.0.0.0:3600
  CHARON_P2P_TCP_ADDRESS: 0.0.0.0:3610
  CHARON_MONITORING_ADDRESS: 0.0.0.0:3620

services:
  #       _                                  _ _            _
  #   ___| |__   __ _ _ __ ___  _ __     ___| (_) ___ _ __ | |_ ___
  #  / __| '_ \ / _` | '__/ _ \| '_ \   / __| | |/ _ \ '_ \| __/ __|
  # | (__| | | | (_| | | | (_) | | | | | (__| | |  __/ | | | |_\__ \
  #  \___|_| |_|\__,_|_|  \___/|_| |_|  \___|_|_|\___|_| |_|\__|___/
  node0:
    <<: *node-base
    container_name: node0
    environment:
      <<: *node-env
      CHARON_PRIVATE_KEY_FILE: /opt/charon/.charon/cluster/node0/charon-enr-private-key
      CHARON_LOCK_FILE: /opt/charon/.charon/cluster/node0/cluster-lock.json
      CHARON_JAEGER_SERVICE: node0
      CHARON_P2P_EXTERNAL_HOSTNAME: node0
      CHARON_BEACON_NODE_ENDPOINTS: ${BN_0}

  node1:
    <<: *node-base
    container_name: node1
    environment:
      <<: *node-env
      CHARON_PRIVATE_KEY_FILE: /opt/charon/.charon/cluster/node1/charon-enr-private-key
      CHARON_LOCK_FILE: /opt/charon/.charon/cluster/node1/cluster-lock.json
      CHARON_JAEGER_SERVICE: node1
      CHARON_P2P_EXTERNAL_HOSTNAME: node1
      CHARON_BEACON_NODE_ENDPOINTS: ${BN_1}

  node2:
    <<: *node-base
    container_name: node2
    environment:
      <<: *node-env
      CHARON_PRIVATE_KEY_FILE: /opt/charon/.charon/cluster/node2/charon-enr-private-key
      CHARON_LOCK_FILE: /opt/charon/.charon/cluster/node2/cluster-lock.json
      CHARON_JAEGER_SERVICE: node2
      CHARON_P2P_EXTERNAL_HOSTNAME: node2
      CHARON_BEACON_NODE_ENDPOINTS: ${BN_2}

  #                        _ _             _
  #  _ __ ___   ___  _ __ (_) |_ ___  _ __(_)_ __   __ _
  # | '_ ` _ \ / _ \| '_ \| | __/ _ \| '__| | '_ \ / _` |
  # | | | | | | (_) | | | | | || (_) | |  | | | | | (_| |
  # |_| |_| |_|\___/|_| |_|_|\__\___/|_|  |_|_| |_|\__, |
  #                                                |___/
  prometheus:
    image: prom/prometheus:v2.44.0
    ports:
      - "9090:9090"
    networks: [network1]
    volumes:
      - ./prometheus/prometheustmp.yml:/etc/prometheus/prometheus.yml
    environment:
      PROMETHEUS_REMOTE_WRITE_TOKEN: ${PROMETHEUS_REMOTE_WRITE_TOKEN:-}

  grafana:
    image: grafana/grafana:9.5.3
    ports:
      - "3000:3000"
    networks: [ network1 ]
    depends_on: [ prometheus ]
    volumes:
      - ./grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
      - ./grafana/dashboards.yml:/etc/grafana/provisioning/dashboards/datasource.yml
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini:ro
      - ./grafana/dashboards:/etc/dashboards

networks:
  network1:
    name: ${NETWORK_NAME}
    external: true
